---
tls:
  stores:
    default:
      defaultCertificate:
        certFile: /root/tbrouwer-cloudflare-origin.cert
        keyFile: /root/tbrouwer-cloudflare-origin.key

http:
  serversTransports:
    pve:
      rootCAs:
        - /root/cert-proxmox.crt

    pve-backup:
      insecureSkipVerify: true

  routers:
    authelia:
      entryPoints:
        - web-secure
      rule: "Host (`authelia.{{ domain }}`)"
      service: authelia
      tls: {}

    pve:
      entryPoints:
        - web-secure
      rule: "Host (`pve.{{ domain }}`)"
      middlewares:
        - authelia
      service: pve
      tls: {}

    pihole:
      entryPoints:
        - web-secure
      rule: "PathPrefix(`/admin`) && Host (`pihole.{{ domain }}`)"
      middlewares:
        - authelia
      service: pihole
      tls: {}

    pihole_path:
      entryPoints:
        - web-secure
      rule: "Host (`pihole.{{ domain }}`)"
      middlewares:
        - authelia
        - addprefix-pihole
      service: pihole
      tls: {}

    pihole_2:
      entryPoints:
        - web-secure
      rule: "PathPrefix(`/admin`) && Host (`pihole-2.{{ domain }}`)"
      middlewares:
        - authelia
      service: pihole_2
      tls: {}

    pihole_2_path:
      entryPoints:
        - web-secure
      rule: "Host (`pihole-2.{{ domain }}`)"
      middlewares:
        - authelia
        - addprefix-pihole
      service: pihole_2
      tls: {}

    dashy:
      entryPoints:
        - web-secure
      rule: "Host (`dash.{{ domain }}`)"
      service: dashy
      tls: {}

    grafana:
      entryPoints:
        - web-secure
      rule: "Host (`grafana.{{ domain }}`)"
      middlewares:
        - authelia
      service: grafana
      tls: {}

    portainer:
      entryPoints:
        - web-secure
      rule: "Host (`portainer.{{ domain }}`)"
      middlewares:
        - authelia
      service: portainer
      tls: {}

    tandoor:
      entryPoints:
        - web-secure
      rule: "Host (`tandoor.{{ domain }}`)"
      middlewares:
        - authelia
      service: tandoor
      tls: {}

    passbolt:
      entryPoints:
        - web-secure
      rule: "Host (`passbolt.{{ domain }}`)"
      service: passbolt
      tls: {}

    wireguard:
      entryPoints:
        - web-secure
      rule: "Host (`wireguard.{{ domain }}`)"
      middlewares:
        - authelia
      service: wireguard
      tls: {}

    torrent:
      entryPoints:
        - web-secure
      rule: "Host(`torrent.{{ domain }}`)"
      middlewares:
        - authelia
      service: torrent
      tls: {}

    www-website:
      entryPoints:
        - web-secure
      rule: "Host(`www.{{ domain }}`)"
      service: website
      tls: {}

    website:
      entryPoints:
        - web-secure
      rule: "Host(`{{ domain }}`)"
      middlewares:
        - "www-redirect"
      service: website
      tls: {}

    prowlarr:
      entryPoints:
        - web-secure
      rule: "Host(`prowlarr.{{ domain }}`)"
      middlewares:
        - authelia
      service: prowlarr
      tls: {}

    radarr:
      entryPoints:
        - web-secure
      rule: "Host(`radarr.{{ domain }}`)"
      middlewares:
        - authelia
      service: radarr
      tls: {}

    sonarr:
      entryPoints:
        - web-secure
      rule: "Host(`sonarr.{{ domain }}`)"
      middlewares:
        - authelia
      service: sonarr
      tls: {}

    stirling-pdf:
      entryPoints:
        - web-secure
      rule: "Host(`stirling.{{ domain }}`)"
      middlewares:
        - authelia
      service: stirling-pdf
      tls: {}

    bazarr:
      entryPoints:
        - web-secure
      rule: "Host(`bazarr.{{ domain }}`)"
      middlewares:
        - authelia
      service: bazarr
      tls: {}

    readarr:
      entryPoints:
        - web-secure
      rule: "Host(`readarr.{{ domain }}`)"
      middlewares:
        - authelia
      service: readarr
      tls: {}

    pve-backup:
      entryPoints:
        - web-secure
      rule: "Host (`pve-backup.{{ domain }}`)"
      middlewares:
        - authelia
      service: pve-backup
      tls: {}

    jellyfin:
      entryPoints:
        - web-secure
      rule: "Host(`jellyfin.{{ domain }}`)"
      middlewares:
        - authelia
      service: jellyfin
      tls: {}

    gitea:
      entryPoints:
        - web-secure
      rule: "Host(`gitea.{{ domain }}`)"
      middlewares:
        - authelia
      service: gitea
      tls: {}

    ha:
      entryPoints:
        - web-secure
      rule: "Host(`ha.{{ domain }}`)"
      middlewares:
        - authelia
      service: ha
      tls: {}

    matlab:
      entryPoints:
        - web-secure
      rule: "Host(`matlab.{{ domain }}`)"
      middlewares:
        - authelia
      service: matlab
      tls: {}

    semaphore:
      entryPoints:
        - web-secure
      rule: "Host(`semaphore.{{ domain }}`)"
      middlewares:
        - authelia
      service: semaphore
      tls: {}

  services:
    authelia:
      loadBalancer:
        servers:
          - url: "http://10.12.12.201:9091/"

    dashy:
      loadBalancer:
        servers:
          - url: "http://10.12.12.117:8080/"

    portainer:
      loadBalancer:
        servers:
          - url: "http://10.12.12.201:9000/"

    pve:
      loadBalancer:
        serversTransport: "pve"
        servers:
          - url: "https://10.12.12.100:8006/"

    pihole:
      loadBalancer:
        servers:
          - url: "http://10.12.12.101:80/"

    pihole_2:
      loadBalancer:
        servers:
          - url: "http://10.12.12.112:80/"

    grafana:
      loadBalancer:
        servers:
          - url: "http://10.12.12.201:3000/"

    tandoor:
      loadBalancer:
        servers:
          - url: "http://10.12.12.201:9080/"

    wireguard:
      loadBalancer:
        servers:
          - url: "http://10.12.12.102:10086/"

    torrent:
      loadBalancer:
        servers:
          - url: "http://10.12.12.104:8080/"

    website:
      loadBalancer:
        servers:
          - url: "http://10.12.12.105:80/"

    prowlarr:
      loadBalancer:
        servers:
          - url: "http://10.12.12.106:9696/"

    passbolt:
      loadBalancer:
        servers:
          - url: "http://10.12.12.201:4080/"

    radarr:
      loadBalancer:
        servers:
          - url: "http://10.12.12.106:7878/"

    readarr:
      loadBalancer:
        servers:
          - url: "http://10.12.12.106:8787/"

    sonarr:
      loadBalancer:
        servers:
          - url: "http://10.12.12.106:8989/"

    stirling-pdf:
      loadBalancer:
        servers:
          - url: "http://10.12.12.113:8080/"

    bazarr:
      loadBalancer:
        servers:
          - url: "http://10.12.12.106:6767/"

    pve-backup:
      loadBalancer:
        serversTransport: "pve-backup"
        servers:
          - url: "https://10.12.12.107:8007/"

    jellyfin:
      loadBalancer:
        servers:
          - url: "http://10.12.12.108:8096/"

    gitea:
      loadBalancer:
        servers:
          - url: "http://10.12.12.109:3000/"

    ha:
      loadBalancer:
        servers:
          - url: "http://10.12.12.203:8123/"
    
    matlab:
      loadBalancer:
        servers:
          - url: "http://10.12.12.114:8888/"
    
    semaphore:
      loadBalancer:
        servers:
          - url: "http://10.12.12.110:3000/"

  middlewares:
    addprefix-pihole:
      addPrefix:
        prefix: "/admin"

    www-redirect:
      redirectRegex:
        regex: "https://{{ domain }}/(.*)"
        replacement: "https://www.{{ domain }}/${1}"

    authelia:
      forwardAuth:
        address: http://10.12.12.201:9091/api/verify?rd=https%3A%2F%2Fauthelia.{{ domain }}%2F
        trustForwardHeader: true
        authResponseHeaders: Remote-User,Remote-Groups,Remote-Name,Remote-Email
